{
	"info": {
		"_postman_id": "0ac367e0-20c4-4601-8e14-7d8641dcbaea",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "cheerik",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1996",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var structure = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : {\r",
							"        \"person\": {           \r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"u_age\": { \"type\": \"number\" }, \r",
							"            \"u_name\": {                    \r",
							"                \"type\": \"array\",\r",
							"                \"items\": [\r",
							"                    { \"type\": \"string\" },\r",
							"                    { \"type\": \"number\" },\r",
							"                    { \"type\": \"number\" }\r",
							"            ]\r",
							"            },\r",
							"            \"u_salary_1_5_year\": { \"type\": \"number\" }\r",
							"      },\r",
							"    },\r",
							"    \r",
							"    \"qa_salary_after_12_months\": { \"type\": \"number\" },\r",
							"    \"qa_salary_after_6_months\": { \"type\": \"number\" },\r",
							"    \"start_qa_salary\": { \"type\": \"number\" }\r",
							"}\r",
							"\r",
							"};\r",
							"pm.test(\"Проверка структуры json в ответе\", () => {\r",
							"    pm.response.to.have.jsonSchema(structure);\r",
							"});\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Проверка - start_qa_salary\", function(){\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(jsonData.person.u_name[1]);\r",
							"});\r",
							"pm.test(\"Проверка - qa_salary_after_6_months\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.person.u_name[1]*2);\r",
							"});\r",
							"pm.test(\"Проверка - qa_salary_after_12_months\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.person.u_name[1]*2.9);\r",
							"});\r",
							"pm.test(\"Проверка - u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(jsonData.person.u_name[1]*4);\r",
							"});\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\":24,\r\n    \"salary\":100000,\r\n    \"name\":\"Olga\",\r\n    \"auth_token\":\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var structure = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : {\r",
							"        \"age\" : { \"type\" : \"number\" },\r",
							"        \"name\" : { \"type\" : \"string\" },\r",
							"        \"salary\" : { \r",
							"            \"type\" : \"array\", \r",
							"            \"items\" : [\r",
							"                {\"type\" : \"number\"}, \r",
							"                {\"type\" : \"string\"}, \r",
							"                {\"type\" : \"string\"}\r",
							"            ]\r",
							"      }\r",
							"    }\r",
							"};\r",
							"pm.test(\"Проверка структуры json в ответе\", () => {\r",
							"    pm.response.to.have.jsonSchema(structure);\r",
							"});\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Проверка - salary[0]\", function(){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(jsonData.salary[0]);\r",
							"});\r",
							"pm.test(\"Проверка - salary[1]\", function(){\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(jsonData.salary[0]*2);\r",
							"});\r",
							"pm.test(\"Проверка - salary[2]\", function(){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(jsonData.salary[0]*3);\r",
							"});\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"2-й элемент массива salary больше 1-го и 0-го\", function(){\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(jsonData.salary[0], jsonData.salary[1]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var structure = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : {\r",
							"        \"age\" : { \"type\" : \"number\" },\r",
							"        \"name\" : { \"type\" : \"string\" },\r",
							"        \"daily_food\" : { \"type\" : \"number\" },\r",
							"        \"daily_sleep\" : { \"type\" : \"number\" }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Проверка структуры json в ответе\", () => {\r",
							"    pm.response.to.have.jsonSchema(structure);\r",
							"});\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var weightt = request.data.weight;\r",
							"pm.test(\"Проверка - daily_food\", function(){\r",
							"    pm.expect(jsonData.daily_food).to.eql(weightt*0.012);\r",
							"});\r",
							"pm.test(\"Проверка - daily_sleep\", function(){\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(weightt*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "56",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var struture = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\"type\": \"string\"},\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\"type\": \"array\",\r",
							"              \"items\": [\r",
							"                { \"type\": \"string\"},\r",
							"                { \"type\": \"integer\"}\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\"type\": \"string\"},\r",
							"                { \"type\": \"integer\" }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"      },\r",
							"    },\r",
							"    \"name\": {\"type\": \"string\" },\r",
							"    \"salary\": {\"type\": \"integer\"}\r",
							"  },\r",
							"}\r",
							"\r",
							"pm.test(\"Проверка структуры json в ответе\", () => {\r",
							"    pm.response.to.have.jsonSchema(struture);\r",
							"});\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var namenviroment = pm.environment.get(\"name\");\r",
							"pm.test(\"значение поля name = значению переменной name из окружения\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(namenviroment); \r",
							"});\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"let agee = request.data.age;\r",
							"pm.test(\"значение поля age в ответе соответсвует отправленному в запросе значению поля age\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(agee);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"const val = Object.values(jsonData)\r",
							"var cnt = 1\r",
							"const valid_id = []\r",
							"\r",
							"for (i of jsonData){\r",
							"\r",
							"var cur_i = i.Cur_ID\r",
							"\r",
							"    pm.sendRequest({\r",
							"    url: 'http://162.55.220.72:5005/curr_byn',\r",
							"    method: 'POST',\r",
							"      body: {\r",
							"          mode: 'formdata',\r",
							"          formdata: [\r",
							"            { key: 'auth_token', value: '/s34lfgbj/cheerik/jjd909/71487kjkWpqc1282199618106evny' }, \r",
							"            { key: 'curr_code', value: i.Cur_ID }\r",
							"          ]\r",
							"          \r",
							"      }\r",
							"}, function (err, response) {\r",
							"        if(response.code === 200){\r",
							"            valid_id.push(cur_i)          \r",
							"        }\r",
							"        fun_id()\r",
							"    })\r",
							"\r",
							"}\r",
							"  \r",
							"function fun_id(){\r",
							"    if(cnt < val.length){\r",
							"        cnt++;\r",
							"    } else {\r",
							"        const ran_2 = valid_id[parseInt(Math.random() * valid_id.length)]\r",
							"        console.log('ran_2=====функция===', ran_2) \r",
							"        pm.environment.set(\"Cur_ID\", ran_2);\r",
							"    }\r",
							"    return\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var structure = {\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : {\r",
							"        \"Cur_Abbreviation\" : {\"type\" : \"string\"},\r",
							"        \"Cur_ID\" : {\"type\" : \"integer\"},\r",
							"        \"Cur_Name\" : {\"type\" : \"string\"},\r",
							"        \"Cur_OfficialRate\" : {\"type\" : \"number\"},\r",
							"        \"Cur_Scale\" : {\"type\" : \"number\"},\r",
							"        \"Date\" : {\"type\" : \"string\"}\r",
							"    },\r",
							"    \"required\" : [\r",
							"        \"Cur_Abbreviation\",\r",
							"        \"Cur_ID\",\r",
							"        \"Cur_Name\",\r",
							"        \"Cur_OfficialRate\",\r",
							"        \"Cur_Scale\",\r",
							"        \"Date\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"pm.test(\"Проверка структуры json в ответе\", () => {\r",
							"    pm.response.to.have.jsonSchema(structure);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}
